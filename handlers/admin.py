from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from config import dp, bot, admins_ids, scheduler

from handlers.channel import write_news, start_schedule
from keyboards import kb_admin

from functions.Text import send_logs_auto
import logging
# creating logger2 to use in sending logs
logger2 = logging.getLogger(__name__)

#setting the state admin
class FSMAdmin(StatesGroup):
    admin = State()

# creating a function that enable admin state

@dp.message_handler(commands=['admin_login'])
async def admin_login(message: types.Message, state: FSMContext):
    """
    –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –¥–º–∏–Ω—Å–∫–∏–π, —Ç–æ –≤–ø—É—Å–∫–∞–µ—Ç.
    """
    try:
        await message.answer(
            '–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Å –Ω–∞ –∞–¥–º–∏–Ω–∞...',
        )

        user_id = str(message.from_user.id)
        full_name = message.from_user.full_name

        if user_id in admins_ids:
            await FSMAdmin.admin.set()

            await message.answer(
                f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, {full_name}',
                reply_markup=kb_admin
            )

        else:
            await message.answer(
                f'–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã, {full_name}, –Ω–µ –∞–¥–º–∏–Ω. –Ø –≤—ã–∑—ã–≤–∞—é –ø–æ–ª–∏—Ü–∏—é',
            )
    except aiogram.utils.exceptions.NetworkError as e:
        logger2.error(f"admin_login {e}")
        send_logs_auto(e)
    except aiogram.utils.exceptions.ChatNotFound as e:
        logger2.error(f"admin_login {e}")
        send_logs_auto(e)
    except Exception as e:
        logger2.error(f"admin_login {e}")
        send_logs_auto(e)

# creating a function that disable admin state

@dp.message_handler(commands=['admin_logout'], state=FSMAdmin.admin)
async def admin_logout(message: types.Message, state: FSMContext):
    """
    –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
    """
    await state.finish()

    full_name = message.from_user.full_name

    await message.answer(
        f'–í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–µ–Ω. –ü–æ–∫–∞-–ø–æ–∫–∞, {full_name}',
    )

# creating a function that send post manually, without bot

@dp.message_handler(commands=['send_post_manually'], state=FSMAdmin.admin)
async def send_post_manually(message: types.Message, n_news=3):
    """
    –í—Ä—É—á–Ω—É—é –∑–∞–ø—É—Å–∫–∞–µ—Ç `write_news` –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –≤—ã—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :type message: aiogram.types.Message
    :param n_news: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø–æ—Å—Ç–∞.
    :type n_news: int
    """
    try:
        await message.answer('–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å—Ç –≤—Ä—É—á–Ω—É—é...')

        await write_news()

        await message.answer('–ü–æ—Å—Ç has been –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
    #–û—à–∏–±–∫–∞, –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ ID —á–∞—Ç–∞
    except aiogram.utils.exceptions.ChatNotFound as e:
        logger2.error(f"send_post_manually {e}")
        send_logs_auto(e)
    #–û—à–∏–±–∫–∞ —Å–µ—Ç–∏
    except aiogram.utils.exceptions.NetworkError as e:
        logger2.error(f"send_post_manually {e}")
        send_logs_auto(e)
    #–û—à–∏–±–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏ –∫–∞–∫–æ–π —Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    except NameError as e:
        logger2.error(f"send_post_manually {e}")
        send_logs_auto(e)
    #–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    except Exception as e:
        logger2.error(f"send_post_manually {e}")
        send_logs_auto(e)

# creating a function that send logs manually

@dp.message_handler(commands=['send_logs_manually'], state=FSMAdmin.admin)
async def send_logs_manually(message: types.Message):
    """
    –í—Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–≥–∏.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –≤—ã—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :type message: aiogram.types.Message
    """
    try:
        await message.answer(
            '–û—Ç–ø—Ä–∞–≤–ª—è—é –ª–æ–≥–≥–∏...',
        )

        with open('.\main_log.log', 'rb') as log_file:
            await bot.send_document(
                chat_id=message.chat.id,
                document=log_file)
    #–û—à–∏–±–∫–∞ –≤ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
    except IOError as e:
        logger2.error(f"send_logs_manually {e}")
        send_logs_auto(e)
    except Exception as e: 
        logger2.error(f"send_logs_manually {e}") 
        send_logs_auto(e)

# creating a function that disables the schedule

@dp.message_handler(commands=['disable_schedule'], state=FSMAdmin.admin)
async def disable_schedule(message: types.Message):
    """
    –û—Ç–∫–ª—é—á–∞–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ `write_news` –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –≤—ã—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :type message: aiogram.types.Message
    """
    try:
        if scheduler.running:
            await message.answer(
                "–û—Ç–∫–ª—é—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...üöß \n –ü—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞... \n –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω."
            )
            scheduler.shutdown()
        else:
            await message.answer(
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –≤ –æ—Ç–∫–ª—é—á–∫–µ. –Ω–µ –∂–¥–∏ –≤—Ä—É–±–∞–π, –≤—Ä–µ–º—è –¥–µ–Ω–≥–∞!"
            )
    except aiogram.utils.exceptions.NetworkError as e:
        logger2.error(f"dis_sch{e}")
        send_logs_auto(e)
    except aiogram.utils.exceptions.ChatNotFound as e:
        logger2.error(f"dis_sch {e}")
        send_logs_auto(e)
    except Exception as e:
        logger2.error(f"dis_sch {e}")
        send_logs_auto(e)

# creating a function that enables the schedule

@dp.message_handler(commands=['enable_schedule'], state=FSMAdmin.admin)
async def enable_schedule(message: types.Message):
    """
    –í–∫–ª—é—á–∞–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ `write_news` –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –≤—ã—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :type message: aiogram.types.Message
    """
    try:
        if scheduler.running:
            await message.answer(
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ, –ø–æ–ø–µ–π –ø–æ–∫–∞ –∫–∏—Ñ–∏—Ä—á–∏–∫—É."
            )

        else:
            await message.answer(
                "–ü–æ–¥—Ä—É–±–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...‚úÖ\n –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...\n –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á—ë–Ω."
            )
            await start_schedule()
    except aiogram.utils.exceptions.NetworkError as e:
        logger2.error(f"en_sch{e}")
        send_logs_auto(e)
    except aiogram.utils.exceptions.ChatNotFound as e:
        logger2.error(f"en_sch {e}")
        send_logs_auto(e)
    except Exception as e:
        logger2.error(f"en_sch {e}")
        send_logs_auto(e)

def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(admin_login, commands=['admin_login'])
    dp.register_message_handler(admin_logout, commands=['admin_logout'], state=FSMAdmin.admin)
    dp.register_message_handler(send_logs_manually, commands=['send_logs_manually'], state=FSMAdmin.admin)
    dp.register_message_handler(disable_schedule, commands=['disable_schedule'], state=FSMAdmin.admin)
    dp.register_message_handler(enable_schedule, commands=['enable_schedule'], state=FSMAdmin.admin)
